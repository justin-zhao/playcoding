!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR	Makefile	/^AR := ar$/;"	m
BIN	Makefile	/^BIN := ~\/bin\/$/;"	m
CC	Makefile	/^CC := gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS := -c -g -W -Wall -O2$/;"	m
CLR_FETCHB	global.h	6;"	d
CLR_FETCHG	global.h	5;"	d
CLR_FETCHR	global.h	4;"	d
CLR_RGB	global.h	3;"	d
DFLAGS	Makefile	/^DFLAGS :=$/;"	m
DUMP	Makefile	/^DUMP := objdump$/;"	m
ECHO	Makefile	/^ECHO := echo$/;"	m
FETCHB	back.c	12;"	d	file:
FETCHG	back.c	11;"	d	file:
FETCHR	back.c	10;"	d	file:
INCLUDES	Makefile	/^INCLUDES := $(shell pkg-config --cflags gtk+-3.0)$/;"	m
LD	Makefile	/^LD := ld$/;"	m
LFLAGS	Makefile	/^LFLAGS := $/;"	m
LIBS	Makefile	/^LIBS := $(shell pkg-config --libs gtk+-3.0)$/;"	m
MAX_BALL_NUM	data.c	9;"	d	file:
MV	Makefile	/^MV := mv$/;"	m
MYRGB	back.c	9;"	d	file:
OBJS	Makefile	/^OBJS := playcoding.o$/;"	m
RM	Makefile	/^RM := rm -rf$/;"	m
SRCS	Makefile	/^SRCS := ball.c data.c windows.c playcoding.c$/;"	m
TARGET	Makefile	/^TARGET := playcoding$/;"	m
T_BALL	back.c	/^} T_BALL;$/;"	t	typeref:struct:_BALL	file:
T_BALL	ball.h	/^} T_BALL;$/;"	t	typeref:struct:_BALL
T_SPEED	global.h	/^} T_SPEED;$/;"	t	typeref:struct:_SPEED
_BALL	back.c	/^typedef struct _BALL{$/;"	s	file:
_BALL	ball.h	/^typedef struct _BALL{$/;"	s
_SPEED	global.h	/^typedef struct _SPEED{$/;"	s
activate	back.c	/^activate (GtkApplication *app,$/;"	f	file:
activate	windows.c	/^void activate (GtkApplication *app, gpointer user_data)$/;"	f
ballArray	data.c	/^static T_BALL *ballArray[MAX_BALL_NUM]={NULL};$/;"	v	file:
ball_addSpeed	ball.c	/^void ball_addSpeed(T_BALL *pBall, float xSpeed, float ySpeed)$/;"	f
ball_destroy	back.c	/^void ball_destroy(T_BALL *pBall)$/;"	f
ball_destroy	ball.c	/^void ball_destroy(T_BALL *pBall)$/;"	f
ball_getPos	ball.c	/^void ball_getPos(T_BALL *pBall, int *px, int *py)$/;"	f
ball_getRadius	ball.c	/^int ball_getRadius(T_BALL *pBall)$/;"	f
ball_getSpeed	ball.c	/^T_SPEED ball_getSpeed(T_BALL *pBall)$/;"	f
ball_init	back.c	/^T_BALL *ball_init(int x, int y, int r, unsigned int clr)$/;"	f
ball_init	ball.c	/^T_BALL *ball_init(int x, int y, int r, unsigned int clr)$/;"	f
ball_move	back.c	/^void ball_move(T_BALL *pBall, int x, int y)$/;"	f
ball_move	ball.c	/^void ball_move(T_BALL *pBall, int winWidth, int winHeight)$/;"	f
ball_refresh	ball.c	/^void ball_refresh(T_BALL *pBall, cairo_t *pCR, int winWidth, int winHeight)$/;"	f
ball_setClr	ball.c	/^void ball_setClr(T_BALL *pBall, unsigned int clr)$/;"	f
ball_setRadius	ball.c	/^void ball_setRadius(T_BALL *pBall, int r)$/;"	f
ball_setSpeed	ball.c	/^void ball_setSpeed(T_BALL *pBall, T_SPEED speed)$/;"	f
ball_setWidth	ball.c	/^void ball_setWidth(T_BALL *pBall, unsigned int width)$/;"	f
ball_show	back.c	/^void ball_show(T_BALL *pBall)$/;"	f
ball_show	ball.c	/^void ball_show(T_BALL *pBall, cairo_t *pCR)$/;"	f
button_press_event_cb	back.c	/^button_press_event_cb (GtkWidget      *widget,$/;"	f	file:
button_press_event_cb	windows.c	/^static gboolean button_press_event_cb (GtkWidget      *widget, GdkEventButton *event,$/;"	f	file:
clear_surface	back.c	/^clear_surface (void)$/;"	f	file:
clear_surface	windows.c	/^void clear_surface (void)$/;"	f
close_window	back.c	/^close_window (void)$/;"	f	file:
close_window	windows.c	/^static void close_window (void)$/;"	f	file:
clr	back.c	/^  unsigned int clr;$/;"	m	struct:_BALL	file:
clr	ball.h	/^	unsigned int clr;			\/\/color$/;"	m	struct:_BALL
collision	data.c	/^static void collision(int ball0, int ball1, int winWidth, int winHeight)$/;"	f	file:
configure_event_cb	back.c	/^configure_event_cb (GtkWidget         *widget,$/;"	f	file:
configure_event_cb	windows.c	/^static gboolean configure_event_cb (GtkWidget         *widget,$/;"	f	file:
data_destroy	data.c	/^void data_destroy()$/;"	f
data_init	data.c	/^void data_init()$/;"	f
draw_brush	back.c	/^draw_brush (GtkWidget *widget,$/;"	f	file:
draw_brush	windows.c	/^static void draw_brush (GtkWidget *widget,$/;"	f	file:
draw_cb	back.c	/^draw_cb (GtkWidget *widget,$/;"	f	file:
draw_cb	windows.c	/^static gboolean draw_cb (GtkWidget *widget,$/;"	f	file:
main	back.c	/^main (int    argc,$/;"	f
main	playcoding.c	/^int main (int argc, char **argv)$/;"	f
motion_notify_event_cb	back.c	/^motion_notify_event_cb (GtkWidget      *widget,$/;"	f	file:
motion_notify_event_cb	windows.c	/^static gboolean motion_notify_event_cb (GtkWidget      *widget,$/;"	f	file:
on_key_press	back.c	/^on_key_press (GtkWidget *widget, GdkEventKey *event, gpointer user_data)$/;"	f	file:
on_key_press	data.c	/^gboolean on_key_press (GtkWidget *widget, GdkEventKey *event, gpointer user_data)$/;"	f
pBall1	back.c	/^static T_BALL *pBall1 = NULL;$/;"	v	file:
pDraw	back.c	/^static GtkWidget *pDraw = NULL;$/;"	v	file:
pDraw	windows.c	/^static GtkWidget *pDraw = NULL;$/;"	v	file:
pSurface	windows.c	/^static cairo_surface_t *pSurface = NULL;$/;"	v	file:
r	back.c	/^  int x, y, r;$/;"	m	struct:_BALL	file:
r	ball.h	/^	int x, y, r;	\/\/x position, y position, radious$/;"	m	struct:_BALL
refresh_all	data.c	/^gboolean refresh_all(cairo_t *pCR, int winWidth, int winHeight)$/;"	f
running	data.c	/^static gboolean running = TRUE;$/;"	v	file:
scanRelation	data.c	/^static void scanRelation(int winWidth, int winHeight)$/;"	f	file:
scr_height	back.c	/^static int scr_height = 0;$/;"	v	file:
scr_width	back.c	/^static int scr_width = 0;$/;"	v	file:
sigroutine	back.c	/^void sigroutine(int signo)$/;"	f
sigroutine	windows.c	/^static void sigroutine(int signo)$/;"	f	file:
speed	ball.h	/^	T_SPEED speed;	\/\/move speed$/;"	m	struct:_BALL
speedx	back.c	/^static int speedx=5;$/;"	v	file:
speedy	back.c	/^static int speedy=3;$/;"	v	file:
surface	back.c	/^static cairo_surface_t *surface = NULL;$/;"	v	file:
width	back.c	/^  int width;$/;"	m	struct:_BALL	file:
width	ball.h	/^	unsigned int width;		\/\/line width$/;"	m	struct:_BALL
x	back.c	/^  int x, y, r;$/;"	m	struct:_BALL	file:
x	ball.h	/^	int x, y, r;	\/\/x position, y position, radious$/;"	m	struct:_BALL
xSpeed	global.h	/^	float xSpeed, ySpeed;$/;"	m	struct:_SPEED
y	back.c	/^  int x, y, r;$/;"	m	struct:_BALL	file:
y	ball.h	/^	int x, y, r;	\/\/x position, y position, radious$/;"	m	struct:_BALL
ySpeed	global.h	/^	float xSpeed, ySpeed;$/;"	m	struct:_SPEED
